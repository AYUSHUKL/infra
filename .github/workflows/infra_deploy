name: Infrastructure_Deploy

on:
  workflow_dispatch:
    inputs:
      aws_account:
        required: true
        type: string
      aws_region:
        required: true
        type: string
        default: 'eu-west-1'
      aws_environment:
        required: true
        type: choice
        default: 'dev'
        options:
        - dev
        - prod
        - pre-prod
      application_name:
        required: false
        type: string
        description: 'The Application name'
        default: 'fotmes'
        
        
jobs:
  infrastructure_depoly:
    name: Infrastructure deploy - ${{ inputs.aws_account }} - ${{ inputs.application_name }} - ${{ inputs.aws_environment }}
    runs-on: ubuntu-latest
    env:
        aws_account: ${{ inputs.aws_account }}
        ENVIRONMENT: ${{ inputs.aws_environment }}
        region: ${{ inputs.aws_region }}
        github_organization : 'ghcr.io/BH-Corporate-Functions'
        
# These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read
      packages: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Disabling shallow checkoutlone is recommended for improving relevancy of reporting
          fetch-depth: 0
      
#      - name: Login to ghcr.io
#        uses: docker/login-action@v2
#        with:
#            registry: ghcr.io
#            username: ${{ secrets.MAVEN_WRITE_REPOSITORY_USER }}
#            password: ${{ secrets.MAVEN_WRITE_REPOSITORY_PASSWORD }}

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v35
        
        # To compare changes between the current commit and the last pushed remote commit set `since_last_remote_commit: true`. e.g
        # with:
        #   since_last_remote_commit: true 

      - name: List all changed files
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
          
      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 0
          format: 'YYYY-MM-DD-HH-mm-ss'

      - name: Convert YAML to JSON
        run: |
         yq -o=json config/params_${{inputs.aws_environment}}.yaml > params_${{inputs.aws_environment}}.json
         cat params_${{inputs.aws_environment}}.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "arn:aws:iam::${{ inputs.aws_account }}:role/CICD-GitHubActions-Role"
          aws-region: "eu-west-1"
          role-session-name: ${{ github.actor }}-${{ github.workflow }}-${{ inputs.aws_account }}-${{ inputs.application_name }}-${{ inputs.aws_environment }}

      - name: Check My STS Credential
        run: |
          aws sts get-caller-identity

      - name: LINT
        uses: stelligent/cfn_nag@master
        with:
          input_path: ./aws

      - name: Fail if cfn_nag scan contains failures
        # sum cfn_nag failures and return it as exit code 
        run: |
            exit `grep Failures cfn_nag.out | awk '{ SUM += $3} END { print SUM }'`

      - name: Convert JSON to parameters
        id: convertparameter
        run: |
          echo "`jq '.UpdateParameter="${{ steps.time.outputs.time }}"' params_${{inputs.aws_environment}}.json`" > params_${{inputs.aws_environment}}.json
          echo "`jq -r 'to_entries | map("\(.key)=\(.value)") | join(",")' params_${{inputs.aws_environment}}.json `" > aws_parameters_${{inputs.aws_environment}}.txt
          echo "aws_parameters=$(cat aws_parameters_${{inputs.aws_environment}}.txt)" >> $GITHUB_OUTPUT
          cat params_${{inputs.aws_environment}}.json
          
      - name: log parameters
        run: |
          echo "${{ steps.convertparameter.outputs.aws_parameters }}"

      # Deploy Infra to AWS CloudFormation
      - name: Deploy Infra to AWS CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
            name: ${{ inputs.application_name }}-infrastructure-${{ inputs.aws_environment }}
            template: aws/infrastructure.yaml
            capabilities: 'CAPABILITY_NAMED_IAM'
            role-arn: 'arn:aws:iam::${{ inputs.aws_account }}:role/CICD-Cloudformation-Role'
            parameter-overrides: "${{ steps.convertparameter.outputs.aws_parameters }}"
